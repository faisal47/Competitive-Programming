#include <vector>
#include <list>
#include <map>
#include <set>
#include <queue>
#include <deque>
#include <stack>
#include <bitset>
#include <algorithm>
#include <functional>
#include <numeric>
#include <utility>
#include <sstream>
#include <iostream>
#include <iomanip>
#include <cstdio>
#include <cmath>
#include <cstdlib>
#include <ctime>
#include <string.h>

using namespace std;
int dp[1010][2];
bool recurse(int n,bool a)
{
    if(dp[n][a]!=-1)
    return dp[n][a];
    bool flag=0,x;
    if(a)
        x=0;
    else
        x=1;
    int i;
    if(!x)
    {
        for (i=2; i<n; i++)
        {
            if(n%i==0)
            {
                x=( x || recurse(n-i,!a));
                flag=1;
            }
        }
    }
    else
    {
        for (i=2; i<n; i++)
        {
            if(n%i==0)
            {
                x=( x && recurse(n-i,!a));
                flag=1;
            }
        }
    }
    if(!flag && a)
        return 0;
    else if(!flag && !a)
        return 1;
    return dp[n][a] =x;
}

class TheNumberGameDivTwo
{
public:
    string find(int n)
    {
        memset(dp,-1,sizeof(dp));
        if(recurse(n,1))
            return "John";
        else
            return "Brus";
    }
};


// BEGIN KAWIGIEDIT TESTING
 //Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, int p0, bool hasAnswer, string p1)
{
    cout << "Test " << testNum << ": [" << p0;
    cout << "]" << endl;
    TheNumberGameDivTwo *obj;
    string answer;
    obj = new TheNumberGameDivTwo();
    clock_t startTime = clock();
    answer = obj->find(p0);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer)
    {
        cout << "Desired answer:" << endl;
        cout << "\t" << "\"" << p1 << "\"" << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << "\"" << answer << "\"" << endl;
    if (hasAnswer)
    {
        res = answer == p1;
    }
    if (!res)
    {
        cout << "DOESN'T MATCH!!!!" << endl;
    }
    else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2)
    {
        cout << "FAIL the timeout" << endl;
        res = false;
    }
    else if (hasAnswer)
    {
        cout << "Match :-)" << endl;
    }
    else
    {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main()
{
    bool all_right;
    all_right = true;

    int p0;
    string p1;

    {
   //      ----- test 0 -----
        p0 = 1000;
        p1 = "John";
        all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
     //    ------------------
    }

    {
        // ----- test 1 -----
        p0 = 2;
        p1 = "Brus";
        all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 2 -----
        p0 = 747;
        p1 = "Brus";
        all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 3 -----
        p0 = 128;
        p1 = "Brus";
        all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
        // ------------------
    }

    if (all_right)
    {
        cout << "You're a stud (at least on the example cases)!" << endl;
    }
    else
    {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
