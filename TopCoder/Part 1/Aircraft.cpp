#include <bits/stdc++.h>

#define ms(a,b) memset(a,b,sizeof(a))
#define inf 1<<28
#define FOR_0(i,n) for(i=0;i<n;i++)
#define FOR_1(i,n) for(i=1;i<=n;i++)
#define clr(a) a.clear()
#define pb push_back
#define vec_ vector
#define eps 1E-7
#define fop   freopen("input.txt","r",stdin);freopen("output.txt","w",stdout);
#define scch(a) scanf("%c",&a)
#define scll1(a) scanf("%lld",&a)
#define scll2(a,b) scanf("%lld %lld",&a,&b)
#define scll3(a,b,c) scanf("%lld %lld %lld",&a,&b,&c)
#define sci1(a) scanf("%d",&a)
#define sci2(a,b) scanf("%d %d",&a,&b)
#define sci3(a,b,c) scanf("%d %d %d",&a,&b,&c)
#define scd1(a) scanf("%lf",&a)
#define scd2(a,b) scanf("%lf %lf",&a,&b)
#define scd3(a,b,c) scanf("%lf %lf %lf",&a,&b,&c)
#define sz(a) a.size()
using namespace std;


class Aircraft
{
public:
    string nearMiss(vector <int> p1, vector <int> v1, vector <int> p2, vector <int> v2, int R)
    {
        double a,b1,b2,b3,c1,c2,c3,j=.01,k;
        int i;
        for(i=0; i<300000; i++)
        {

            b1=v1[0]*i+p1[0];
            b2=v1[1]*i+p1[1];
            b3=v1[2]*i+p1[2];
            c1=v2[0]*i+p2[0];
            c2=v2[1]*i+p2[1];
            c3=v2[2]*i+p2[2];
            a=sqrt(pow(b1-c1,2)+pow(b2-c2,2)+pow(b3-c3,2));
            if((int)a<=R)
            {
                for(j=.01; j<=1.; j+=.01)
                {
                    k=i+j;

                    b1=v1[0]*k+p1[0];
                    b2=v1[1]*k+p1[1];
                    b3=v1[2]*k+p1[2];
                    c1=v2[0]*k+p2[0];
                    c2=v2[1]*k+p2[1];
                    c3=v2[2]*k+p2[2];
                    a=sqrt(pow(b1-c1,2)+pow(b2-c2,2)+pow(b3-c3,2));
                    if(a<=(double)R)
                    return "YES";
                }
            }
        }
        return "NO";
    }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.4 (beta) modified by pivanof
bool KawigiEdit_RunTest(int testNum, vector <int> p0, vector <int> p1, vector <int> p2, vector <int> p3, int p4, bool hasAnswer, string p5)
{
    cout << "Test " << testNum << ": [" << "{";
    for (int i = 0; int(p0.size()) > i; ++i)
    {
        if (i > 0)
        {
            cout << ",";
        }
        cout << p0[i];
    }
    cout << "}" << "," << "{";
    for (int i = 0; int(p1.size()) > i; ++i)
    {
        if (i > 0)
        {
            cout << ",";
        }
        cout << p1[i];
    }
    cout << "}" << "," << "{";
    for (int i = 0; int(p2.size()) > i; ++i)
    {
        if (i > 0)
        {
            cout << ",";
        }
        cout << p2[i];
    }
    cout << "}" << "," << "{";
    for (int i = 0; int(p3.size()) > i; ++i)
    {
        if (i > 0)
        {
            cout << ",";
        }
        cout << p3[i];
    }
    cout << "}" << "," << p4;
    cout << "]" << endl;
    Aircraft *obj;
    string answer;
    obj = new Aircraft();
    clock_t startTime = clock();
    answer = obj->nearMiss(p0, p1, p2, p3, p4);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer)
    {
        cout << "Desired answer:" << endl;
        cout << "\t" << "\"" << p5 << "\"" << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << "\"" << answer << "\"" << endl;
    if (hasAnswer)
    {
        res = answer == p5;
    }
    if (!res)
    {
        cout << "DOESN'T MATCH!!!!" << endl;
    }
    else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2)
    {
        cout << "FAIL the timeout" << endl;
        res = false;
    }
    else if (hasAnswer)
    {
        cout << "Match :-)" << endl;
    }
    else
    {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main()
{
    bool all_right;
    all_right = true;

    vector <int> p0;
    vector <int> p1;
    vector <int> p2;
    vector <int> p3;
    int p4;
    string p5;

    {
        // ----- test 0 -----
        int t0[] = {15,50,5};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        int t1[] = {25,1,0};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        int t2[] = {161,102,9};
        p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
        int t3[] = {-10,-10,-1};
        p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
        p4 = 10;
        p5 = "YES";
        all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, p4, true, p5) && all_right;
        // ------------------
    }

    {
        // ----- test 1 -----
        int t0[] = {0,0,0};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        int t1[] = {2,2,0};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        int t2[] = {9,0,5};
        p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
        int t3[] = {-2,2,0};
        p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
        p4 = 5;
        p5 = "YES";
        all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, p4, true, p5) && all_right;
        // ------------------
    }

    {
        // ----- test 2 -----
        int t0[] = {0,0,0};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        int t1[] = {-2,2,0};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        int t2[] = {9,0,5};
        p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
        int t3[] = {2,2,0};
        p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
        p4 = 5;
        p5 = "NO";
        all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, p4, true, p5) && all_right;
        // ------------------
    }

    {
        // ----- test 3 -----
        int t0[] = {-2838,-7940,-2936};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        int t1[] = {1,1,-2};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        int t2[] = {532,3850,9590};
        p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
        int t3[] = {1,0,-3};
        p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
        p4 = 3410;
        p5 = "YES";
        all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, p4, true, p5) && all_right;
        // ------------------
    }

    {
        // ----- test 4 -----
        int t0[] = {-8509,9560,345};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        int t1[] = {-89,-33,62};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        int t2[] = {-5185,-1417,2846};
        p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
        int t3[] = {-58,24,26};
        p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
        p4 = 8344;
        p5 = "YES";
        all_right = KawigiEdit_RunTest(4, p0, p1, p2, p3, p4, true, p5) && all_right;
        // ------------------
    }

    {
        // ----- test 5 -----
        int t0[] = {-7163,-371,-2459};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        int t1[] = {-59,-41,-14};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        int t2[] = {-2398,-426,-5487};
        p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
        int t3[] = {-43,27,67};
        p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
        p4 = 5410;
        p5 = "NO";
        all_right = KawigiEdit_RunTest(5, p0, p1, p2, p3, p4, true, p5) && all_right;
        // ------------------
    }

    {
        // ----- test 6 -----
        int t0[] = {1774,-4491,7810};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        int t1[] = {-12,19,-24};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        int t2[] = {2322,3793,9897};
        p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
        int t3[] = {-12,19,-24};
        p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
        p4 = 10000;
        p5 = "YES";
        all_right = KawigiEdit_RunTest(6, p0, p1, p2, p3, p4, true, p5) && all_right;
        // ------------------
    }

    {
        // ----- test 7 -----
        int t0[] = {3731,8537,5661};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        int t1[] = {-70,71,32};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        int t2[] = {8701,-1886,-5115};
        p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
        int t3[] = {28,-13,7};
        p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
        p4 = 9766;
        p5 = "NO";
        all_right = KawigiEdit_RunTest(7, p0, p1, p2, p3, p4, true, p5) && all_right;
        // ------------------
    }

    if (all_right)
    {
        cout << "You're a stud (at least on the example cases)!" << endl;
    }
    else
    {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// END KAWIGIEDIT TESTING
//Powered by KawigiEdit 2.1.4 (beta) modified by pivanof!
