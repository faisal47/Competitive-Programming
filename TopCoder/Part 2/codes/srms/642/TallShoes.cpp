#include <bits/stdc++.h>
#define ms(a,b) memset(a,b,sizeof(a))
#define inf 1<<28
#define mp make_pair
#define pii pair<int,int>
#define fs first
#define sc second
#define pob pop_back
#define vec_ vector
#define clr(a) a.clear()
#define pb push_back
#define eps 1E-7
#define all(a) a.begin(),a.end()
#define allr(a) a.rbegin(),a.rend()
#define fop   freopen("input.txt","r",stdin);freopen("output.txt","w",stdout);
#define sz(a) a.size()
#define ll long long
#define dd double
using namespace std;

template<class T1> void deb(T1 e)
{
    cout<<e<<endl;
}
template<class T1,class T2> void deb(T1 e1,T2 e2)
{
    cout<<e1<<" "<<e2<<endl;
}
template<class T1,class T2,class T3> void deb(T1 e1,T2 e2,T3 e3)
{
    cout<<e1<<" "<<e2<<" "<<e3<<endl;
}
template<class T1,class T2,class T3,class T4> void deb(T1 e1,T2 e2,T3 e3,T4 e4)
{
    cout<<e1<<" "<<e2<<" "<<e3<<" "<<e4<<endl;
}
template<class T1,class T2,class T3,class T4,class T5> void deb(T1 e1,T2 e2,T3 e3,T4 e4,T5 e5)
{
    cout<<e1<<" "<<e2<<" "<<e3<<" "<<e4<<" "<<e5<<endl;
}
template<class T1,class T2,class T3,class T4,class T5,class T6> void deb(T1 e1,T2 e2,T3 e3,T4 e4,T5 e5,T6 e6)
{
    cout<<e1<<" "<<e2<<" "<<e3<<" "<<e4<<" "<<e5<<" "<<e6<<endl;
}
//template <class T> T lcm(T a, T b){return (a/__gcd(a,b)) * b;}
//ll bigmod(ll a,ll b,ll m){if(b == 0) return 1%m;ll x = bigmod(a,b/2,m);x = (x * x) % m;if(b % 2 == 1) x = (x * a) % m;return x;}
//double dur(int x1,int y1,int x2,int y2)
//{
//    return sqrt((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2));
//template<class T> string toString(T n){ostringstream oss;oss<<n;oss.flush();return oss.str();}
//int toInt(string s){int r=0;istringstream sin(s);sin>>r;return r;}
//struct point{int x, y; point () {} point(int a, int b) {x = a, y = b;}};
//int X[]={0,-1,-1,-1,0,1,1,1};
//int Y[]={-1,-1,0,1,1,1,0,-1};
//int X[]={-1,0,1,0};
//int Y[]={0,1,0,-1};

#define mt 60
#define mod


struct maan
{
    int a,b,cost;
};
vec_<maan>v;
int n;
ll dist[mt][mt],b;

void init(int s)
{
    int i,j;
    for(i=0;i<n;i++)
        for(j=0;j<n;j++)
        dist[i][j]=(1ll<<60);

    for(i=0;i<sz(v);i++)
    {
        if(v[i].cost<s)
            dist[v[i].a][v[i].b]=dist[v[i].b][v[i].a]=(ll)(s-v[i].cost)*(s-v[i].cost);
        else
            dist[v[i].a][v[i].b]=dist[v[i].b][v[i].a]=0;
    }
}

void fw()
{
    int i,j,k;
    for(k=0;k<n;k++)
    for(i=0;i<n;i++)
    for(j=0;j<n;j++)
    dist[i][j]=min(dist[i][j],dist[i][k]+dist[k][j]);
}

bool okay(int s)
{
    init(s);
    fw();
    return dist[0][n-1]<=b;
}

int bs()
{
    int l=0;
    int h=1e9;
    int mid;
    int ans=0;
    while(l<=h)
    {
        mid=(l+h)>>1;
        if(okay(mid))
        {
            ans=max(ans,mid);
            l=mid+1;
        }
        else
            h=mid-1;
    }
    return ans;
}

class TallShoes
{
public:
    int maxHeight(int N, vector <int> X, vector <int> Y, vector <int> hs, long long B)
    {
        n=N;
        b=B;
        int i;
        clr(v);
        for(i=0;i<sz(X);i++)
            v.pb({X[i],Y[i],hs[i]});
        return bs();
    }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, vector <int> p1, vector <int> p2, vector <int> p3, long long p4, bool hasAnswer, int p5)
{
    cout << "Test " << testNum << ": [" << p0 << "," << "{";
    for (int i = 0; int(p1.size()) > i; ++i)
    {
        if (i > 0)
        {
            cout << ",";
        }
        cout << p1[i];
    }
    cout << "}" << "," << "{";
    for (int i = 0; int(p2.size()) > i; ++i)
    {
        if (i > 0)
        {
            cout << ",";
        }
        cout << p2[i];
    }
    cout << "}" << "," << "{";
    for (int i = 0; int(p3.size()) > i; ++i)
    {
        if (i > 0)
        {
            cout << ",";
        }
        cout << p3[i];
    }
    cout << "}" << "," << p4;
    cout << "]" << endl;
    TallShoes *obj;
    int answer;
    obj = new TallShoes();
    clock_t startTime = clock();
    answer = obj->maxHeight(p0, p1, p2, p3, p4);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer)
    {
        cout << "Desired answer:" << endl;
        cout << "\t" << p5 << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << answer << endl;
    if (hasAnswer)
    {
        res = answer == p5;
    }
    if (!res)
    {
        cout << "DOESN'T MATCH!!!!" << endl;
    }
    else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2)
    {
        cout << "FAIL the timeout" << endl;
        res = false;
    }
    else if (hasAnswer)
    {
        cout << "Match :-)" << endl;
    }
    else
    {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main()
{
    bool all_right;
    all_right = true;

    int p0;
    vector <int> p1;
    vector <int> p2;
    vector <int> p3;
    long long p4;
    int p5;

    {
        // ----- test 0 -----
        p0 = 3;
        int t1[] = {0,1,0};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        int t2[] = {1,2,2};
        p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
        int t3[] = {3,4,2};
        p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
        p4 = 1ll;
        p5 = 4;
        all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, p4, true, p5) && all_right;
        // ------------------
    }

    {
        // ----- test 1 -----
        p0 = 3;
        int t1[] = {0,1,0};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        int t2[] = {1,2,2};
        p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
        int t3[] = {3,4,2};
        p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
        p4 = 52ll;
        p5 = 9;
        all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, p4, true, p5) && all_right;
        // ------------------
    }

    {
        // ----- test 2 -----
        p0 = 8;
        int t1[] = {0,0,3,3,4,4,4,7,7};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        int t2[] = {1,2,1,2,3,5,6,5,6};
        p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
        int t3[] = {1000,1000,1000,1000,1,1000,1000,1000,1000};
        p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
        p4 = 3ll;
        p5 = 2;
        all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, p4, true, p5) && all_right;
        // ------------------
    }

    {
        // ----- test 3 -----
        p0 = 10;
        int t1[] = {0,1,2,3,4,5,6,7,8};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        int t2[] = {1,2,3,4,5,6,7,8,9};
        p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
        int t3[] = {0,0,0,0,0,0,0,0,0};
        p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
        p4 = 9876543210123ll;
        p5 = 1047565;
        all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, p4, true, p5) && all_right;
        // ------------------
    }

    {
        // ----- test 4 -----
        p0 = 6;
        int t1[] = {0,0,0,0,0,1,1,1,1,2,2,2,3,3,4};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        int t2[] = {1,2,3,4,5,2,3,4,5,3,4,5,4,5,5};
        p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
        int t3[] = {999999,986588,976757,988569,977678,999999,967675,947856,955856,999999,975956,956687,999999,979687,999999};
        p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
        p4 = 0ll;
        p5 = 999999;
        all_right = KawigiEdit_RunTest(4, p0, p1, p2, p3, p4, true, p5) && all_right;
        // ------------------
    }

    if (all_right)
    {
        cout << "You're a stud (at least on the example cases)!" << endl;
    }
    else
    {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// PROBLEM STATEMENT
//
// A king of a mystical land likes to wear very tall shoes.
// The tall shoes are sometimes an inconvenience as they make traveling through the kingdom's road network difficult.
//
//
//
// There are N cities in the kingdom.
// The cities are numbered 0 through N-1.
// The road network in the kingdom is connected: it is possible to get from any city to any other city by taking one or more roads.
// Each road in the network is bidirectional and connects two different cities.
// You are given the description of the road network in three vector <int>s: X, Y, and height, each with the same number of elements.
// For each valid i, there is a road that connects cities X[i] and Y[i].
// The value height[i] is the height limit for that road:
// The king can travel along that road if and only if the height of his shoes is height[i] or less.
//
//
//
// The king wants to walk from city 0 to city N-1.
// While doing so, he wants to wear shoes that are as tall as possible.
// Before he goes for the walk, he can increase the height limits for some roads.
// The king has a budget of B dollars for the modifications.
// Increasing the height limit of any road by k costs k^2 dollars.
// The height limit of each road can only be increased at most once.
//
//
//
// You are given the int N, the vector <int>s X, Y and height, and the long long B.
// Compute the maximum height of shoes the king may wear for his walk from city 0 to city N-1 after increasing the height limits appropriately.
//
//
// DEFINITION
// Class:TallShoes
// Method:maxHeight
// Parameters:int, vector <int>, vector <int>, vector <int>, long long
// Returns:int
// Method signature:int maxHeight(int N, vector <int> X, vector <int> Y, vector <int> height, long long B)
//
//
// CONSTRAINTS
// -N will be between 2 and 50, inclusive.
// -from, to, height will have between N-1 and N*(N-1)/2 elements, inclusive.
// -Each element of X, Y will be between 0 and N-1, inclusive.
// -For all i, X[i] != Y[i].
// -Each undirected edge X[i], Y[i] will appear at most once.
// -Each element of height will be between 0 and 10^6, inclusive.
// -The graph described by X and Y will be connected.
// -B will be between 0 and 10^15, inclusive.
//
//
// EXAMPLES
//
// 0)
// 3
// {0, 1, 0}
// {1, 2, 2}
// {3, 4, 2}
// 1
//
// Returns: 4
//
//
// In this example there are three roads: 0-1 (height limit 3), 1-2 (height limit 4), and 0-2 (height limit 2).
// The king has a budget of 1 dollar.
// The optimal way to use that budget is to increase the height limit for the 0-1 road from 3 to 4.
// After that change, the king can use shoes of height 4 and walk along the path 0-1-2.
//
//
// 1)
// 3
// {0, 1, 0}
// {1, 2, 2}
// {3, 4, 2}
// 52
//
// Returns: 9
//
// Here we can increase the last road's height by 7 which will allow the king to wear shoes of height 9. Note that the king is not required to spend the entire budget.
//
// 2)
// 8
// {0, 0, 3, 3, 4, 4, 4, 7, 7}
// {1, 2, 1, 2, 3, 5, 6, 5, 6}
// {1000, 1000, 1000, 1000, 1, 1000, 1000, 1000, 1000}
// 3
//
// Returns: 2
//
//
//
// 3)
// 10
// {0,1,2,3,4,5,6,7,8}
// {1,2,3,4,5,6,7,8,9}
// {0,0,0,0,0,0,0,0,0}
// 9876543210123
//
// Returns: 1047565
//
//
//
// 4)
// 6
// {0,0,0,0,0,1,1,1,1,2,2,2,3,3,4}
// {1,2,3,4,5,2,3,4,5,3,4,5,4,5,5}
// {999999,986588,976757,988569,977678,999999,967675,947856,955856,999999,975956,956687,999999,979687,999999}
// 0
//
// Returns: 999999
//
//
//
// END KAWIGIEDIT TESTING


//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
