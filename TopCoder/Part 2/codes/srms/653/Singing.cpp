#include <bits/stdc++.h>
#define ms(a,b) memset(a,b,sizeof(a))
#define inf 1<<28
#define mp make_pair
#define pii pair<int,int>
#define pi acos(-1)
#define fs first
#define sc second
#define pob pop_back
#define vec_ vector
#define clr(a) a.clear()
#define pb push_back
#define eps 1E-7
#define all(a) a.begin(),a.end()
#define allr(a) a.rbegin(),a.rend()
#define fop   freopen("input.txt","r",stdin);freopen("output.txt","w",stdout);
#define sz(a) (int)a.size()
#define ll long long
#define dd double
using namespace std;

template<class T1> void deb(T1 e){cout<<e<<endl;}
template<class T1,class T2> void deb(T1 e1,T2 e2){cout<<e1<<" "<<e2<<endl;}
template<class T1,class T2,class T3> void deb(T1 e1,T2 e2,T3 e3){cout<<e1<<" "<<e2<<" "<<e3<<endl;}
template<class T1,class T2,class T3,class T4> void deb(T1 e1,T2 e2,T3 e3,T4 e4){cout<<e1<<" "<<e2<<" "<<e3<<" "<<e4<<endl;}
template<class T1,class T2,class T3,class T4,class T5> void deb(T1 e1,T2 e2,T3 e3,T4 e4,T5 e5){cout<<e1<<" "<<e2<<" "<<e3<<" "<<e4<<" "<<e5<<endl;}
template<class T1,class T2,class T3,class T4,class T5,class T6> void deb(T1 e1,T2 e2,T3 e3,T4 e4,T5 e5,T6 e6){cout<<e1<<" "<<e2<<" "<<e3<<" "<<e4<<" "<<e5<<" "<<e6<<endl;}
//template <class T> T lcm(T a, T b){return (a/__gcd(a,b)) * b;}
//ll bigmod(ll a,ll b,ll m){if(b == 0) return 1%m;ll x = bigmod(a,b/2,m);x = (x * x) % m;if(b % 2 == 1) x = (x * a) % m;return x;}
//double dur(int x1,int y1,int x2,int y2)
//{
//    return sqrt((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2));
//template<class T> string toString(T n){ostringstream oss;oss<<n;oss.flush();return oss.str();}
//int toInt(string s){int r=0;istringstream sin(s);sin>>r;return r;}
//struct point{int x, y; point () {} point(int a, int b) {x = a, y = b;}};
//int X[]={0,-1,-1,-1,0,1,1,1};
//int Y[]={-1,-1,0,1,1,1,0,-1};
//int X[]={-1,0,1,0};
//int Y[]={0,1,0,-1};

#define mt 1010
#define mod

int dp[mt][mt][2],a,b,c,d,n;
vec_<int>arr;

int solve2(int pos,int ans,bool pl)
{
    if(pos == n)
        return ans;
    int &ret=dp[pos][ans][pl];
    if(ret != -1)
        return ret;
    ret=2000;
    if(pl==0)
    {
        if(arr[pos] >= a && arr[pos]<=b)
        ret=min(ret,solve2(pos+1,ans,pl));

        if(arr[pos] >= c && arr[pos]<=d)
        ret=min(ret,solve2(pos+1,ans+1,!pl));
    }
    else
    {
        if(arr[pos] >= a && arr[pos]<=b)
            ret=min(ret,solve2(pos+1,ans+1,!pl));

        if(arr[pos] >= c && arr[pos]<=d)
        ret=min(ret,solve2(pos+1,ans,pl));
    }
    return ret;
}

class Singing {
public:
	int solve(int N, int low, int high, vector <int> pitch) {
        arr=pitch;
        ms(dp,-1);
        n=sz(arr);
        a=low;b=N;
        c=1;d=high;
        int ret=solve2(0,0,0);
        ms(dp,-1);
        ret=min(ret,solve2(0,0,1));
        return ret;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, vector <int> p3, bool hasAnswer, int p4) {
	cout << "Test " << testNum << ": [" << p0 << "," << p1 << "," << p2 << "," << "{";
	for (int i = 0; int(p3.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p3[i];
	}
	cout << "}";
	cout << "]" << endl;
	Singing *obj;
	int answer;
	obj = new Singing();
	clock_t startTime = clock();
	answer = obj->solve(p0, p1, p2, p3);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p4 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p4;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	int p0;
	int p1;
	int p2;
	vector <int> p3;
	int p4;

	{
	// ----- test 0 -----
	p0 = 3;
	p1 = 2;
	p2 = 2;
	int t3[] = {1,2,3,2,1,2};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	p4 = 2;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}

	{
	// ----- test 1 -----
	p0 = 10;
	p1 = 3;
	p2 = 7;
	int t3[] = {4,4,5,5,6,5,3,6};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	p4 = 0;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}

	{
	// ----- test 2 -----
	p0 = 6;
	p1 = 2;
	p2 = 5;
	int t3[] = {5,3,1,6,4,2};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	p4 = 1;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}

	{
	// ----- test 3 -----
	p0 = 10;
	p1 = 4;
	p2 = 5;
	int t3[] = {1,4,3,5,2,5,7,5,9};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	p4 = 3;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}

	{
	// ----- test 4 -----
	p0 = 100;
	p1 = 20;
	p2 = 80;
	int t3[] = {2,27,3,53,53,52,52,60,85,89,100,53,60,2,3,53,100,89,40,42,2,53,2,85};
			p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
	p4 = 5;
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, p3, true, p4) && all_right;
	// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
//
// Alice and Bob are going to sing a song together.
// You are given three ints: N, low, and high.
// For simplicity, we will assign the numbers 1 through N to the pitches that occur in the song (from the lowest to the highest).
// Alice is only able to sing pitches between low and N, inclusive.
// Bob is only able to sing pitches between 1 and high, inclusive.
// (It is guaranteed that the ranges of their voices overlap.)
//
//
//
// You are also given a vector <int> pitch containing the pitches of all notes in the song, in order.
//
//
//
// Each note of the song must be sung by exactly one person: either Alice or Bob.
// Each person can only sing notes that are within their range.
// All notes with the same pitch must be sung by the same person.
// The number of times the singer changes during the song must be as small as possible.
//
//
//
// Formally, a switch is a pair of consecutive notes that are sung by different persons.
// Compute and return the smallest possible number of switches when Alice and Bob sing the song.
//
//
// DEFINITION
// Class:Singing
// Method:solve
// Parameters:int, int, int, vector <int>
// Returns:int
// Method signature:int solve(int N, int low, int high, vector <int> pitch)
//
//
// NOTES
// -A singer is not required to sing a consecutive sequence of pitches. For example, sometimes Bob may sing pitches 1 and 3 while Alice sings pitches 2 and 4.
//
//
// CONSTRAINTS
// -N will be between 1 and 1,000, inclusive.
// -low will be between 1 and N, inclusive.
// -high will be between low and N, inclusive.
// -The number of elements in pitch will be between 1 and 1,000, inclusive.
// -All elements of pitch will be between 1 and N.
//
//
// EXAMPLES
//
// 0)
// 3
// 2
// 2
// {1,2,3,2,1,2}
//
// Returns: 2
//
// There are 3 pitches.
// Alice is able to sing pitches 2 and 3, while Bob is able to sing pitches 1 and 2.
// Thus, there are only two different ways in which they can sing the notes of the given song:
// Either they will sing in the order Bob-Alice-Alice-Alice-Bob-Alice (3 switches), or in the order
// Bob-Bob-Alice-Bob-Bob-Bob (only 2 switches).
// The second way of singing the song is better.
//
// 1)
// 10
// 3
// 7
// {4,4,5,5,6,5,3,6}
//
// Returns: 0
//
// Alice can sing the entire song. In that case there are no switches.
//
// 2)
// 6
// 2
// 5
// {5,3,1,6,4,2}
//
// Returns: 1
//
// In the optimal solution Bob sings the first three notes (pitches 5, 3, and 1), and Alice sings the next three notes.
//
// 3)
// 10
// 4
// 5
// {1,4,3,5,2,5,7,5,9}
//
// Returns: 3
//
//
//
// 4)
// 100
// 20
// 80
// {2,27,3,53,53,52,52,60,85,89,100,53,60,2,3,53,100,89,40,42,2,53,2,85}
//
// Returns: 5
//
//
//
// END KAWIGIEDIT TESTING


//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
