#include <bits/stdc++.h>
#define ms(a,b) memset(a,b,sizeof(a))
#define inf 1<<28
#define mp make_pair
#define pii pair<int,int>
#define fs first
#define sc second
#define pob pop_back
#define vec_ vector
#define clr(a) a.clear()
#define pb push_back
#define eps 1E-7
#define all(a) a.begin(),a.end()
#define allr(a) a.rbegin(),a.rend()
#define fop   freopen("input.txt","r",stdin);freopen("output.txt","w",stdout);
#define sz(a) (int)a.size()
#define ll long long
#define dd double
using namespace std;

template<class T1> void deb(T1 e){cout<<e<<endl;}
template<class T1,class T2> void deb(T1 e1,T2 e2){cout<<e1<<" "<<e2<<endl;}
template<class T1,class T2,class T3> void deb(T1 e1,T2 e2,T3 e3){cout<<e1<<" "<<e2<<" "<<e3<<endl;}
template<class T1,class T2,class T3,class T4> void deb(T1 e1,T2 e2,T3 e3,T4 e4){cout<<e1<<" "<<e2<<" "<<e3<<" "<<e4<<endl;}
template<class T1,class T2,class T3,class T4,class T5> void deb(T1 e1,T2 e2,T3 e3,T4 e4,T5 e5){cout<<e1<<" "<<e2<<" "<<e3<<" "<<e4<<" "<<e5<<endl;}
template<class T1,class T2,class T3,class T4,class T5,class T6> void deb(T1 e1,T2 e2,T3 e3,T4 e4,T5 e5,T6 e6){cout<<e1<<" "<<e2<<" "<<e3<<" "<<e4<<" "<<e5<<" "<<e6<<endl;}
//template <class T> T lcm(T a, T b){return (a/__gcd(a,b)) * b;}
//ll bigmod(ll a,ll b,ll m){if(b == 0) return 1%m;ll x = bigmod(a,b/2,m);x = (x * x) % m;if(b % 2 == 1) x = (x * a) % m;return x;}
//double dur(int x1,int y1,int x2,int y2)
//{
//    return sqrt((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2));
//template<class T> string toString(T n){ostringstream oss;oss<<n;oss.flush();return oss.str();}
//int toInt(string s){int r=0;istringstream sin(s);sin>>r;return r;}
//struct point{int x, y; point () {} point(int a, int b) {x = a, y = b;}};
//int X[]={0,-1,-1,-1,0,1,1,1};
//int Y[]={-1,-1,0,1,1,1,0,-1};
//int X[]={-1,0,1,0};
//int Y[]={0,1,0,-1};

#define mt 100010
#define mod 1000000007

bool sieve[mt];
ll prime[664579];
int p;
void SOE()
{
	int i, j, k=0, r;
	prime[k++] = 2LL;
	for(i=3; i<=mt-1; i+=2)
	{
		if(sieve[i]==false)
		{
			prime[k++] = (ll)(i);
			if(i<(mt-1)/i)
			{
				r = (i<<1);
				for(j=(i*i); j<(mt-1); j+=r)
				{
					sieve[j] = true;
				}
			}
		}
	}
	p = k;
	return ;
}

ll fact(ll num)
{
    int i;
    ll ret;
    for(i=0;i<p;i++)
    {
        if(num%prime[i]==0)
        {
            ret=prime[i];
            while(num >1 && num%prime[i]==0)
                num/=prime[i];
            if(num > 1)
                return 1;
            return ret;
        }
    }
    return ret;
}

ll solve(ll n)
{
    ll ans=1,i;
    ll ret;
    for(i=2;i<=n;i++)
    {
        ret=fact(i);
        ans=(ans * ret)%mod;
    }
    return ans;
}

class ThePermutationGame {
public:
	int findMin(int N) {
        SOE();
        return solve(N);
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << p0;
	cout << "]" << endl;
	ThePermutationGame *obj;
	int answer;
	obj = new ThePermutationGame();
	clock_t startTime = clock();
	answer = obj->findMin(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	int p0;
	int p1;

	{
	// ----- test 0 -----
	p0 = 2;
	p1 = 2;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 1 -----
	p0 = 3;
	p1 = 6;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 2 -----
	p0 = 11;
	p1 = 504;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 3 -----
	p0 = 102;
	p1 = 841777601;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 4 -----
	p0 = 9999;
	p1 = 804862568;
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
//
// Alice and Bob are playing a game called "The Permutation Game".
// The game is parameterized with the int N.
// At the start of the game, Alice chooses a positive integer x, and Bob chooses a permutation of the first N positive integers.
// Let p be Bob's permutation.
// Alice will start at 1, and apply the permutation to this value x times.
// More formally, let f(1) = p[1], and f(m) = p[f(m-1)] for all m >= 2.
// Alice's final value will be f(x).
//
// Alice wants to choose the smallest x such that f(x) = 1 for any permutation Bob can provide.
//
// Compute and return the value of such x modulo 1,000,000,007.
//
//
// DEFINITION
// Class:ThePermutationGame
// Method:findMin
// Parameters:int
// Returns:int
// Method signature:int findMin(int N)
//
//
// NOTES
// -A permutation of the first N positive integers is a sequence of length N that contains each of the integers 1 through N exactly once. The i-th (1-indexed) element of a permutation p is denoted by p[i].
//
//
// CONSTRAINTS
// -N will be between 1 and 100,000 inclusive.
//
//
// EXAMPLES
//
// 0)
// 2
//
// Returns: 2
//
//
// Bob can choose the permutations (1,2) or (2,1).
// If Alice chooses 1, then, Bob can choose the permutation (2,1), which would would make f(1) = 2.
// However, if Alice chooses 2, no matter which permutation Bob chooses, Alice will get f(2) = 1.
// Thus the answer in this case is 2.
//
//
// 1)
// 3
//
// Returns: 6
//
//
//
// 2)
// 11
//
// Returns: 504
//
//
//
// 3)
// 102
//
// Returns: 841777601
//
//
//
// 4)
// 9999
//
// Returns: 804862568
//
//
//
// END KAWIGIEDIT TESTING


//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
