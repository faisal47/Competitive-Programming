#include <bits/stdc++.h>
#define ms(a,b) memset(a,b,sizeof(a))
#define inf 1<<28
#define mp make_pair
#define pii pair<int,int>
#define fs first
#define sc second
#define pob pop_back
#define vec_ vector
#define clr(a) a.clear()
#define pb push_back
#define eps 1E-7
#define sf scanf
#define pf printf
#define all(a) a.begin(),a.end()
#define allr(a) a.rbegin(),a.rend()
#define fop   freopen("input.txt","r",stdin);freopen("output.txt","w",stdout);
#define sz(a) a.size()
#define ll long long
#define ull unsigned long long
#define dd double
using namespace std;

template<class T1> void deb(T1 e)
{
    cout<<e<<endl;
}
template<class T1,class T2> void deb(T1 e1,T2 e2)
{
    cout<<e1<<" "<<e2<<endl;
}
template<class T1,class T2,class T3> void deb(T1 e1,T2 e2,T3 e3)
{
    cout<<e1<<" "<<e2<<" "<<e3<<endl;
}
template<class T1,class T2,class T3,class T4> void deb(T1 e1,T2 e2,T3 e3,T4 e4)
{
    cout<<e1<<" "<<e2<<" "<<e3<<" "<<e4<<endl;
}
template<class T1,class T2,class T3,class T4,class T5> void deb(T1 e1,T2 e2,T3 e3,T4 e4,T5 e5)
{
    cout<<e1<<" "<<e2<<" "<<e3<<" "<<e4<<" "<<e5<<endl;
}
template<class T1,class T2,class T3,class T4,class T5,class T6> void deb(T1 e1,T2 e2,T3 e3,T4 e4,T5 e5,T6 e6)
{
    cout<<e1<<" "<<e2<<" "<<e3<<" "<<e4<<" "<<e5<<" "<<e6<<endl;
}
//template <class T> T lcm(T a, T b){return (a/__gcd(a,b)) * b;}
//ll bigmod(ll a,ll b,ll m){if(b == 0) return 1%m;ll x = bigmod(a,b/2,m);x = (x * x) % m;if(b % 2 == 1) x = (x * a) % m;return x;}
//double dur(int x1,int y1,int x2,int y2)
//{
//    return sqrt((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2));
//}
//int X[]={0,-1,-1,-1,0,1,1,1};
//int Y[]={-1,-1,0,1,1,1,0,-1};
//int X[]={-1,0,1,0};
//int Y[]={0,1,0,-1};

#define mt
#define mod


class ShufflingCardsDiv2
{
public:
    string shuffle(vector <int> v)
    {
        vec_<int>v1;
        int i;
        for(i=0; i<sz(v); i++)
        {
            if(i&1)
                continue;

            v1.pb(v[i]);
        }
        int ordhek=sz(v)/2;
        int c1,c2,c1u,c2u;
        c1=0;
        c1u=ordhek/2;
        c2u=ordhek/2;
        if(ordhek&1)
            c1u++;

        c2=0;
        for(i=0; i<sz(v1); i++)
            if(v1[i]>=1 && v1[i]<=ordhek)
                c1++;
            else
                c2++;

        if(c1==c1u && c2==c2u)
            return "Possible";

        return "Impossible";
    }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, bool hasAnswer, string p1)
{
    cout << "Test " << testNum << ": [" << "{";
    for (int i = 0; int(p0.size()) > i; ++i)
    {
        if (i > 0)
        {
            cout << ",";
        }
        cout << p0[i];
    }
    cout << "}";
    cout << "]" << endl;
    ShufflingCardsDiv2 *obj;
    string answer;
    obj = new ShufflingCardsDiv2();
    clock_t startTime = clock();
    answer = obj->shuffle(p0);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer)
    {
        cout << "Desired answer:" << endl;
        cout << "\t" << "\"" << p1 << "\"" << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << "\"" << answer << "\"" << endl;
    if (hasAnswer)
    {
        res = answer == p1;
    }
    if (!res)
    {
        cout << "DOESN'T MATCH!!!!" << endl;
    }
    else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2)
    {
        cout << "FAIL the timeout" << endl;
        res = false;
    }
    else if (hasAnswer)
    {
        cout << "Match :-)" << endl;
    }
    else
    {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main()
{
    bool all_right;
    all_right = true;

    vector <int> p0;
    string p1;

    {
        // ----- test 0 -----
        int t0[] = {1,2,3,4};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = "Possible";
        all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 1 -----
        int t0[] = {4,3,2,1};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = "Possible";
        all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 2 -----
        int t0[] = {1,3,2,4};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = "Impossible";
        all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 3 -----
        int t0[] = {1,4,2,5,3,6};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = "Impossible";
        all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
        // ------------------
    }

    {
        // ----- test 4 -----
        int t0[] = {8,5,4,9,1,7,6,10,3,2};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        p1 = "Possible";
        all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
        // ------------------
    }

    if (all_right)
    {
        cout << "You're a stud (at least on the example cases)!" << endl;
    }
    else
    {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// PROBLEM STATEMENT
// Fox Ciel likes shuffling cards.
// She uses a deck with 2N cards, numbered 1 through 2N.
//
// Ciel always uses the same procedure when shuffling.
// One round of shuffling looks as follows:
//
// She splits the deck into two piles: the top N cards will be pile A, the bottom N cards pile B.
// She takes pile A and rearranges the cards it contains arbitrarily.
// She takes pile B and rearranges the cards it contains arbitrarily.
// She interleaves the cards from the two piles, producing a single deck again. More precisely, if pile A has cards A1,A2,...,AN and pile B has cards B1,B2,...,BN then the new deck will be A1,B1,A2,B2,...,AN,BN. (Note that the first card has to come from pile A.)
//
//
// For example, let N=2 and suppose that Ciel starts with the sorted deck 1,2,3,4.
// One possible round of shuffling looks as follows:
//
// She splits the deck into two piles: the cards 1,2 are pile A and the cards 3,4 are pile B.
// She rearranges pile A into 1,2. (I.e., she keeps the cards in their current order.)
// She rearranges pile B into 4,3.
// She merges the two piles, obtaining the deck 1,4,2,3.
//
//
// In the above example we have shown one of four possible outcomes of the shuffling process.
// After the first round of shuffling, Ciel could have that deck in one of these four orders:
//
// 1,3,2,4
// 1,4,2,3
// 2,3,1,4
// 2,4,1,3
//
//
// You are given a vector <int> permutation which contains a permutation of the 2N cards.
// Ciel's deck is currently sorted: the cards are in the order 1,2,3,...,2N from top to bottom.
// Ciel wants to make exactly two rounds of shuffling.
// After the second round the order of cards in her deck should correspond to the given permutation.
// Return "Possible" (quotes for clarity) if this can be done and "Impossible" otherwise.
//
// DEFINITION
// Class:ShufflingCardsDiv2
// Method:shuffle
// Parameters:vector <int>
// Returns:string
// Method signature:string shuffle(vector <int> permutation)
//
//
// CONSTRAINTS
// -permutation will contain between 4 and 200 elements, inclusive.
// -The number of elements in permutation will be even.
// -The elements of permutation will form a permutation of the numbers 1 through 2N, where 2N is the number of elements in permutation.
//
//
// EXAMPLES
//
// 0)
// {1,2,3,4}
//
// Returns: "Possible"
//
// Fox Ciel can make the following two shuffles: {1,2,3,4} -> {1,3,2,4} -> {1,2,3,4}.
//
// Note that she cannot simply keep the deck in sorted order, the shuffling procedure does not allow that.
// Luckily for Ciel, it is possible to shuffle the deck in the first round and to return the cards to their original places in the second round.
//
// 1)
// {4,3,2,1}
//
// Returns: "Possible"
//
//
//
// 2)
// {1,3,2,4}
//
// Returns: "Impossible"
//
// Ciel can produce this permutation after the first round of shuffling.
// However, it is not possible to start with a sorted deck and to have this permutation of cards after two rounds of shuffling.
//
//
// 3)
// {1,4,2,5,3,6}
//
// Returns: "Impossible"
//
//
//
// 4)
// {8,5,4,9,1,7,6,10,3,2}
//
// Returns: "Possible"
//
//
//
// END KAWIGIEDIT TESTING


//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
