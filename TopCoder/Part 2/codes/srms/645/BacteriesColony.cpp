#include <bits/stdc++.h>
#define ms(a,b) memset(a,b,sizeof(a))
#define inf 1<<28
#define mp make_pair
#define pii pair<int,int>
#define fs first
#define sc second
#define pob pop_back
#define vec_ vector
#define clr(a) a.clear()
#define pb push_back
#define eps 1E-7
#define all(a) a.begin(),a.end()
#define allr(a) a.rbegin(),a.rend()
#define fop   freopen("input.txt","r",stdin);freopen("output.txt","w",stdout);
#define sz(a) (int)a.size()
#define ll long long
#define dd double
using namespace std;

template<class T1> void deb(T1 e){cout<<e<<endl;}
template<class T1,class T2> void deb(T1 e1,T2 e2){cout<<e1<<" "<<e2<<endl;}
template<class T1,class T2,class T3> void deb(T1 e1,T2 e2,T3 e3){cout<<e1<<" "<<e2<<" "<<e3<<endl;}
template<class T1,class T2,class T3,class T4> void deb(T1 e1,T2 e2,T3 e3,T4 e4){cout<<e1<<" "<<e2<<" "<<e3<<" "<<e4<<endl;}
template<class T1,class T2,class T3,class T4,class T5> void deb(T1 e1,T2 e2,T3 e3,T4 e4,T5 e5){cout<<e1<<" "<<e2<<" "<<e3<<" "<<e4<<" "<<e5<<endl;}
template<class T1,class T2,class T3,class T4,class T5,class T6> void deb(T1 e1,T2 e2,T3 e3,T4 e4,T5 e5,T6 e6){cout<<e1<<" "<<e2<<" "<<e3<<" "<<e4<<" "<<e5<<" "<<e6<<endl;}
//template <class T> T lcm(T a, T b){return (a/__gcd(a,b)) * b;}
//ll bigmod(ll a,ll b,ll m){if(b == 0) return 1%m;ll x = bigmod(a,b/2,m);x = (x * x) % m;if(b % 2 == 1) x = (x * a) % m;return x;}
//double dur(int x1,int y1,int x2,int y2)
//{
//    return sqrt((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2));
//template<class T> string toString(T n){ostringstream oss;oss<<n;oss.flush();return oss.str();}
//int toInt(string s){int r=0;istringstream sin(s);sin>>r;return r;}
//struct point{int x, y; point () {} point(int a, int b) {x = a, y = b;}};
//int X[]={0,-1,-1,-1,0,1,1,1};
//int Y[]={-1,-1,0,1,1,1,0,-1};
//int X[]={-1,0,1,0};
//int Y[]={0,1,0,-1};

#define mt
#define mod


class BacteriesColony {
public:
	vector <int> performTheExperiment(vector <int> v) {
        int arr[55],i;
        bool flag;
        while(1)
        {
            flag=0;
            ms(arr,0);

            for(i=1;i<sz(v)-1;i++)
            {
                if(v[i]>v[i-1] && v[i]>v[i+1])
                    {
                        arr[i]=-1;
                        flag=1;
                    }
                else if(v[i]<v[i-1] && v[i]<v[i+1])
                    {
                        arr[i]=1;
                        flag=1;
                    }
            }

            for(i=1;i<sz(v)-1;i++)
                v[i]+=arr[i];

            if(!flag)
                break;
        }
        return v;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, bool hasAnswer, vector <int> p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}";
	cout << "]" << endl;
	BacteriesColony *obj;
	vector <int> answer;
	obj = new BacteriesColony();
	clock_t startTime = clock();
	answer = obj->performTheExperiment(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << "{";
		for (int i = 0; int(p1.size()) > i; ++i) {
			if (i > 0) {
				cout << ",";
			}
			cout << p1[i];
		}
		cout << "}" << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << "{";
	for (int i = 0; int(answer.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << answer[i];
	}
	cout << "}" << endl;
	if (hasAnswer) {
		if (answer.size() != p1.size()) {
			res = false;
		} else {
			for (int i = 0; int(answer.size()) > i; ++i) {
				if (answer[i] != p1[i]) {
					res = false;
				}
			}
		}
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	vector <int> p0;
	vector <int> p1;

	{
	// ----- test 0 -----
	int t0[] = {5,3,4,6,1};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {5,4,4,4,1};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 1 -----
	int t0[] = {1,5,4,9};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {1,4,5,9};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 2 -----
	int t0[] = {78,34,3,54,44,99};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {78,34,34,49,49,99};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 3 -----
	int t0[] = {32,68,50,89,34,56,47,30,82,7,21,16,82,24,91};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {32,59,59,59,47,47,47,47,47,18,18,19,53,53,91};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// Grazyna works in a laboratory.
// Her team is about to perform an experiment with special bacteria.
//
//
// There is a row of vessels.
// Each vessel contains a colony of bacteria.
// The colonies may currently have different sizes.
// Namely, for each valid i there are currently colonies[i] bacteria in the i-th vessel (0-based index).
//
//
// Grazyna has a theory about how the colony sizes change.
// According to the theory, the colony sizes only change during nights and it only happens in two specific cases:
//
// If during a day a colony finds itself immediately between two larger colonies, during the next night its size will increase by 1.
// If during a day a colony finds itself immediately between two smaller colonies, during the next night its size will decrease by 1.
//
// Note that the colonies in the first and last vessel never change their sizes as they are never between two colonies.
// Also note that multiple colonies can change their size each night.
//
//
// The experiment will go on for as long as some colonies keep changing their sizes.
// You are given the vector <int> colonies.
// Compute the result of the experiment, assuming that the colony sizes change according to Grazyna's theory.
// Return a vector <int> with the same number of elements as colonies.
// For each valid i, element i of the return value should be the final size of the colony in the i-th vessel.
//
//
// DEFINITION
// Class:BacteriesColony
// Method:performTheExperiment
// Parameters:vector <int>
// Returns:vector <int>
// Method signature:vector <int> performTheExperiment(vector <int> colonies)
//
//
// NOTES
// -For each valid input the experiment will terminate after finitely many steps.
//
//
// CONSTRAINTS
// -colonies will have between 3 and 50 elements, inclusive.
// -Each element of colonies will be between 1 and 100, inclusive.
//
//
// EXAMPLES
//
// 0)
// {5, 3, 4, 6, 1 }
//
// Returns: {5, 4, 4, 4, 1 }
//
//
// The colony sizes during the first day are given as input: {5, 3, 4, 6, 1}.
// During the first night colony 1 (0-based index) will grow and colony 3 will shrink.
// During the second day the colony sizes will be {5, 4, 4, 5, 1}.
// During the second night colony 3 will shrink again.
// During the third day the colony sizes will be {5, 4, 4, 4, 1}.
// There are no more changes during the third night, so that is the final state and the experiment ends.
//
//
// 1)
// {1, 5, 4, 9 }
//
// Returns: {1, 4, 5, 9 }
//
// During the first night colony 1 will shrink from 5 to 4 and at the same time colony 2 will grow from 4 to 5. Afterwards there will be no more changes.
//
// 2)
// {78, 34, 3, 54, 44, 99 }
//
// Returns: {78, 34, 34, 49, 49, 99 }
//
//
//
// 3)
// {32, 68, 50, 89, 34, 56, 47, 30, 82, 7, 21, 16, 82, 24, 91 }
//
// Returns: {32, 59, 59, 59, 47, 47, 47, 47, 47, 18, 18, 19, 53, 53, 91 }
//
//
//
// END KAWIGIEDIT TESTING


//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
