#include <bits/stdc++.h>
#define ms(a,b) memset(a,b,sizeof(a))
#define inf 1<<28
#define mp make_pair
#define pii pair<int,int>
#define fs first
#define sc second
#define pob pop_back
#define vec_ vector
#define clr(a) a.clear()
#define pb push_back
#define eps 1E-7
#define all(a) a.begin(),a.end()
#define allr(a) a.rbegin(),a.rend()
#define fop   freopen("input.txt","r",stdin);freopen("output.txt","w",stdout);
#define sz(a) (int)a.size()
#define ll long long
#define dd double
using namespace std;

template<class T1> void deb(T1 e){cout<<e<<endl;}
template<class T1,class T2> void deb(T1 e1,T2 e2){cout<<e1<<" "<<e2<<endl;}
template<class T1,class T2,class T3> void deb(T1 e1,T2 e2,T3 e3){cout<<e1<<" "<<e2<<" "<<e3<<endl;}
template<class T1,class T2,class T3,class T4> void deb(T1 e1,T2 e2,T3 e3,T4 e4){cout<<e1<<" "<<e2<<" "<<e3<<" "<<e4<<endl;}
template<class T1,class T2,class T3,class T4,class T5> void deb(T1 e1,T2 e2,T3 e3,T4 e4,T5 e5){cout<<e1<<" "<<e2<<" "<<e3<<" "<<e4<<" "<<e5<<endl;}
template<class T1,class T2,class T3,class T4,class T5,class T6> void deb(T1 e1,T2 e2,T3 e3,T4 e4,T5 e5,T6 e6){cout<<e1<<" "<<e2<<" "<<e3<<" "<<e4<<" "<<e5<<" "<<e6<<endl;}
//template <class T> T lcm(T a, T b){return (a/__gcd(a,b)) * b;}
//ll bigmod(ll a,ll b,ll m){if(b == 0) return 1%m;ll x = bigmod(a,b/2,m);x = (x * x) % m;if(b % 2 == 1) x = (x * a) % m;return x;}
//double dur(int x1,int y1,int x2,int y2)
//{
//    return sqrt((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2));
//template<class T> string toString(T n){ostringstream oss;oss<<n;oss.flush();return oss.str();}
//int toInt(string s){int r=0;istringstream sin(s);sin>>r;return r;}
//struct point{int x, y; point () {} point(int a, int b) {x = a, y = b;}};
//int X[]={0,-1,-1,-1,0,1,1,1};
//int Y[]={-1,-1,0,1,1,1,0,-1};
//int X[]={-1,0,1,0};
//int Y[]={0,1,0,-1};

#define mt
#define mod 1000000007

struct maan
{
    ll pos;
    char ch;
};

bool comp(maan a,maan b)
{
    return a.pos < b.pos;
}

class TaroFillingAStringDiv1 {
public:
	int getNumber(int N, vector <int> posi, string val) {
        vec_<maan>v;
        int i;
        for(i=0;i<sz(posi);i++)
        v.pb({posi[i],val[i]});
        sort(all(v),comp);
        ll ret=1;
//        if(N==305)
//        {
//            deb(sz(v));
//            for(i=1;i<sz(v);i++)
//                deb(v[i-1].pos,v[i].pos,v[i].pos-v[i-1].pos-1,v[i-1].ch,v[i].ch);
//        }
        for(i=1;i<sz(v);i++)
        {
            if(v[i-1].ch == v[i].ch && v[i].pos!=v[i-1].pos+1)
            {
                if((v[i].pos-v[i-1].pos-1)%2==0)
                    ret=(ret * ((v[i].pos-v[i-1].pos)%mod))%mod;
            }
            else if(v[i-1].ch != v[i].ch && v[i].pos!=v[i-1].pos+1)
            {
                if((v[i].pos-v[i-1].pos-1)%2==1)
                    ret=(ret * ((v[i].pos-v[i-1].pos)%mod))%mod;
            }
        }
        return (int)ret;
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, int p0, vector <int> p1, string p2, bool hasAnswer, int p3) {
	cout << "Test " << testNum << ": [" << p0 << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}" << "," << "\"" << p2 << "\"";
	cout << "]" << endl;
	TaroFillingAStringDiv1 *obj;
	int answer;
	obj = new TaroFillingAStringDiv1();
	clock_t startTime = clock();
	answer = obj->getNumber(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p3 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	int p0;
	vector <int> p1;
	string p2;
	int p3;

	{
	// ----- test 0 -----
	p0 = 3;
	int t1[] = {1,3};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = "AB";
	p3 = 2;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}

	{
	// ----- test 1 -----
	p0 = 4;
	int t1[] = {2,1,3,4};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = "ABBA";
	p3 = 1;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}

	{
	// ----- test 2 -----
	p0 = 25;
	int t1[] = {23,4,8,1,24,9,16,17,6,2,25,15,14,7,13};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = "ABBBBABABBAAABA";
	p3 = 1;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}

	{
	// ----- test 3 -----
	p0 = 305;
	int t1[] = {183,115,250,1,188,193,163,221,144,191,92,192,58,215,157,187,227,177,206,15,272,232,49,11,178,59,189,246};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	p2 = "ABAABBABBAABABBBBAAAABBABBBA";
	p3 = 43068480;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
//
// Cat Taro likes strings.
// He is currently constructing a string S of length N.
// Each character of S will be either 'A' or 'B'.
// Taro has already chosen some of the characters.
// You are given these choices as a vector <int> position and a string value.
// For each valid i, the character at the 1-based index position[i] in S is the character value[i].
//
//
//
//
// To Taro, the ugliness of a string is the number of pairs of equal consecutive characters.
// For example, the ugliness of "ABABAABBB" is 3: there is one pair "AA" and two (overlapping) pairs "BB".
//
//
//
//
// Taro now wants to finish S by filling in the remaining characters.
// His goal is to create a string with the smallest possible ugliness.
// Let X be the number of possible strings Taro may produce.
// Return the value (X modulo 1,000,000,007).
//
//
// DEFINITION
// Class:TaroFillingAStringDiv1
// Method:getNumber
// Parameters:int, vector <int>, string
// Returns:int
// Method signature:int getNumber(int N, vector <int> position, string value)
//
//
// CONSTRAINTS
// -N will be between 1 and 1,000,000,000, inclusive.
// -position will contian between 1 and 50 elements, inclusive.
// -value and position will contain the same number of elements.
// -Each element of position will be between 1 and N, inclusive.
// -All elements of position will be distinct.
// -value will consist only of characters 'A' and 'B'.
//
//
// EXAMPLES
//
// 0)
// 3
// {1, 3}
// "AB"
//
// Returns: 2
//
// Currently, Taro's string looks as follows: A_B.
// He can either produce the string AAB or the string ABB.
// Both have the same ugliness.
//
// 1)
// 4
// {2, 1, 3, 4}
// "ABBA"
//
// Returns: 1
//
// All characters of S have already been chosen.
//
// 2)
// 25
// {23, 4, 8, 1, 24, 9, 16, 17, 6, 2, 25, 15, 14, 7, 13}
// "ABBBBABABBAAABA"
//
// Returns: 1
//
//
//
// 3)
// 305
// {183, 115, 250, 1, 188, 193, 163, 221, 144, 191, 92, 192, 58, 215, 157, 187, 227, 177, 206, 15, 272, 232, 49, 11, 178, 59, 189, 246}
// "ABAABBABBAABABBBBAAAABBABBBA"
//
// Returns: 43068480
//
//
//
// END KAWIGIEDIT TESTING


//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
