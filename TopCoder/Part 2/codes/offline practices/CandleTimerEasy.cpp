#include <bits/stdc++.h>
#define ms(a,b) memset(a,b,sizeof(a))
#define inf 1<<28
#define mp make_pair
#define pii pair<int,int>
#define fs first
#define sc second
#define pob pop_back
#define vec_ vector
#define clr(a) a.clear()
#define pb push_back
#define eps 1E-7
#define all(a) a.begin(),a.end()
#define allr(a) a.rbegin(),a.rend()
#define fop   freopen("input.txt","r",stdin);freopen("output.txt","w",stdout);
#define sz(a) a.size()
#define ll long long
#define dd double
using namespace std;

template<class T1> void deb(T1 e){cout<<e<<endl;}
template<class T1,class T2> void deb(T1 e1,T2 e2){cout<<e1<<" "<<e2<<endl;}
template<class T1,class T2,class T3> void deb(T1 e1,T2 e2,T3 e3){cout<<e1<<" "<<e2<<" "<<e3<<endl;}
template<class T1,class T2,class T3,class T4> void deb(T1 e1,T2 e2,T3 e3,T4 e4){cout<<e1<<" "<<e2<<" "<<e3<<" "<<e4<<endl;}
template<class T1,class T2,class T3,class T4,class T5> void deb(T1 e1,T2 e2,T3 e3,T4 e4,T5 e5){cout<<e1<<" "<<e2<<" "<<e3<<" "<<e4<<" "<<e5<<endl;}
template<class T1,class T2,class T3,class T4,class T5,class T6> void deb(T1 e1,T2 e2,T3 e3,T4 e4,T5 e5,T6 e6){cout<<e1<<" "<<e2<<" "<<e3<<" "<<e4<<" "<<e5<<" "<<e6<<endl;}
//template <class T> T lcm(T a, T b){return (a/__gcd(a,b)) * b;}
//ll bigmod(ll a,ll b,ll m){if(b == 0) return 1%m;ll x = bigmod(a,b/2,m);x = (x * x) % m;if(b % 2 == 1) x = (x * a) % m;return x;}
//double dur(int x1,int y1,int x2,int y2)
//{
//    return sqrt((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2));
//template<class T> string toString(T n){ostringstream oss;oss<<n;oss.flush();return oss.str();}
//int toInt(string s){int r=0;istringstream sin(s);sin>>r;return r;}
//struct point{int x, y; point () {} point(int a, int b) {x = a, y = b;}};
//int X[]={0,-1,-1,-1,0,1,1,1};
//int Y[]={-1,-1,0,1,1,1,0,-1};
//int X[]={-1,0,1,0};
//int Y[]={0,1,0,-1};

#define mt 22
#define mod


struct maan
{
  int node,cost;
  bool operator < (const maan& p) const
  {
      return cost > p.cost;
  }
};

int dist[mt];
priority_queue<maan>q;
map<int,bool>ma;
vec_<maan>adj[mt];

int ans,par[mt],n;
vec_<int>leaves;

void pre_dj(int mask)
{
    while(!q.empty())
        q.pop();

    int i;maan temp;
    for(i=0;i<mt;i++)
    {
        dist[i]=inf;
        par[i]=-1;
    }

    for(i=0;i<sz(leaves);i++)
    {
        if(mask & (1<<i))
        {
            temp.node=leaves[i];
            temp.cost=0;
            dist[temp.node]=0;
            q.push(temp);
        }
    }
}


void dj()
{
    maan u,v;
    int d,i;
    while(!q.empty())
    {
        u=q.top();q.pop();
        d=u.cost;
        for(i=0;i<sz(adj[u.node]);i++)
        {
            v.node=adj[u.node][i].node;
            v.cost=d+adj[u.node][i].cost;
            if(v.cost < dist[v.node])
            {
                par[v.node]=u.node;
                dist[v.node]=v.cost;
                q.push(v);
            }
        }
    }
}

void cal()
{
    int i,j,u,v,num;
    dd maxi=0.,d;

    for(i=0;i<n;i++)
    {
        for(j=0;j<sz(adj[i]);j++)
        {
            u=i;
            v=adj[i][j].node;
            if(par[u]==v || par[v]==u)
                continue;

            d=adj[i][j].cost-abs(dist[u]-dist[v]);
//            deb(d);
            d/=2.;
            d+=(dd)max(dist[u],dist[v]);
            maxi=max(d,maxi);
        }
    }

    for(i=0;i<n;i++)
        maxi=max((dd)dist[i],maxi);

    num=2. * maxi;

    if(ma[num])
        return;
    ma[num]=1;

//    deb("i am num == ",num,maxi);

    ans++;
}

void solve(int mask)
{
    if(mask == 0)
        return;
    pre_dj(mask);
    dj();
    cal();
}

class CandleTimerEasy {
public:
	int differentTime(vector <int> v1, vector <int> v2, vector <int> len) {

        int deg[mt],i;ms(deg,0);n=sz(len)+1;
		clr(ma);

        ans=0;

        for(i=0;i<n;i++)
            clr(adj[i]);

        for(i=0;i<sz(len);i++)
        {
            adj[v1[i]].pb({v2[i],len[i]});
            adj[v2[i]].pb({v1[i],len[i]});
            deg[v1[i]]++;
            deg[v2[i]]++;
        }
        clr(leaves);
        for(i=0;i<n;i++)
            if(deg[i]==1)
            leaves.pb(i);

        int mask=(1<<sz(leaves));
        while(mask--)
            solve(mask);

        return ans;

	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, vector <int> p1, vector <int> p2, bool hasAnswer, int p3) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p1.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p1[i];
	}
	cout << "}" << "," << "{";
	for (int i = 0; int(p2.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p2[i];
	}
	cout << "}";
	cout << "]" << endl;
	CandleTimerEasy *obj;
	int answer;
	obj = new CandleTimerEasy();
	clock_t startTime = clock();
	answer = obj->differentTime(p0, p1, p2);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p3 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p3;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	vector <int> p0;
	vector <int> p1;
	vector <int> p2;
	int p3;

	{
	// ----- test 0 -----
	int t0[] = {0,1};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {1,2};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {10,1};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = 2;
	all_right = KawigiEdit_RunTest(0, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}

	{
	// ----- test 1 -----
	int t0[] = {0,0,0};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {1,2,3};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {1,1,1};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = 2;
	all_right = KawigiEdit_RunTest(1, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}

	{
	// ----- test 2 -----
	int t0[] = {0,0,0};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {1,2,3};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {1,2,3};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = 4;
	all_right = KawigiEdit_RunTest(2, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}

	{
	// ----- test 3 -----
	int t0[] = {0,1,1,2,3,3,2,4};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {1,2,3,4,5,6,7,8};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {5,3,2,4,6,8,7,1};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = 7;
	all_right = KawigiEdit_RunTest(3, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}

	{
	// ----- test 4 -----
	int t0[] = {0,0,0,0};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {1,2,3,4};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {123,456,789,1000};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = 8;
	all_right = KawigiEdit_RunTest(4, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}

	{
	// ----- test 5 -----
	int t0[] = {0};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	int t1[] = {1};
			p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
	int t2[] = {1000};
			p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
	p3 = 2;
	all_right = KawigiEdit_RunTest(5, p0, p1, p2, true, p3) && all_right;
	// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
// You have a lot of candles.
// The candles burn at a uniform rate: if you ignite a candle of length L, it will burn completely in L units of time.
// You can also ignite a candle at both ends, which makes it burn twice as fast.
//
//
//
// You have arranged some candles into the shape of a tree.
// You want to use the tree to measure time.
// At the beginning, you will ingite some leaves of the tree (all at the same time).
// Then you will just wait and watch the flames spread across the entire tree.
// (Whenever a flame reaches an inner node of the tree, it spreads to all branches that meet at that node.)
// Note that you are not allowed to light new flames during the process.
// The time you will measure is the time between the moment when you lighted the fire(s) and the moment when the last part of the tree finished burning.
//
//
//
// You are given a description of the tree as three vector <int>s: a, b, and len, with N elements each.
// The nodes of the tree are numbered 0 through N, inclusive.
// For each valid i, there is a candle between the nodes a[i] and b[i] with length len[i].
//
//
//
// Compute and return the number of different times you can measure when following the above procedure.
//
// DEFINITION
// Class:CandleTimerEasy
// Method:differentTime
// Parameters:vector <int>, vector <int>, vector <int>
// Returns:int
// Method signature:int differentTime(vector <int> A, vector <int> B, vector <int> len)
//
//
// CONSTRAINTS
// -A will contain between 1 and 19 elements, inclusive.
// -A, B and len will contain same number of elements.
// -Each element in A will be between 0 and |A|, inclusive.
// -Each element in B will be between 0 and |A|, inclusive.
// -Each element in len will be between 1 and 1000, inclusive.
// -A, B and len will describe a tree.
//
//
// EXAMPLES
//
// 0)
// {0,1}
// {1,2}
// {10,1}
//
// Returns: 2
//
// This tree looks the same as a single candle of length 11. If we light it on one end, we will measure the time 11. If we light it on both ends, we will measure the time 5.5.
//
// 1)
// {0,0,0}
// {1,2,3}
// {1,1,1}
//
// Returns: 2
//
// This time we have 3 ends. If we ignite all of them the time is 1, otherwise the time is 2.
//
// 2)
// {0,0,0}
// {1,2,3}
// {1,2,3}
//
// Returns: 4
//
// We can get 4 different outcomes: 2.5, 3, 4, 5.
//
// 3)
// {0,1,1,2,3,3,2,4}
// {1,2,3,4,5,6,7,8}
// {5,3,2,4,6,8,7,1}
//
// Returns: 7
//
//
//
// 4)
// {0,0,0,0}
// {1,2,3,4}
// {123,456,789,1000}
//
// Returns: 8
//
//
//
// 5)
// {0}
// {1}
// {1000}
//
// Returns: 2
//
//
//
// END KAWIGIEDIT TESTING


//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
