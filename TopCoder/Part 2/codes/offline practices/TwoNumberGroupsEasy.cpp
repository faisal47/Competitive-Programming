#include <bits/stdc++.h>
#define ms(a,b) memset(a,b,sizeof(a))
#define inf 1<<28
#define mp make_pair
#define pii pair<int,int>
#define fs first
#define sc second
#define pob pop_back
#define vec_ vector
#define clr(a) a.clear()
#define pb push_back
#define eps 1E-7
#define all(a) a.begin(),a.end()
#define allr(a) a.rbegin(),a.rend()
#define fop   freopen("input.txt","r",stdin);freopen("output.txt","w",stdout);
#define sz(a) a.size()
#define ll long long
#define dd double
using namespace std;

template<class T1> void deb(T1 e)
{
    cout<<e<<endl;
}
template<class T1,class T2> void deb(T1 e1,T2 e2)
{
    cout<<e1<<" "<<e2<<endl;
}
template<class T1,class T2,class T3> void deb(T1 e1,T2 e2,T3 e3)
{
    cout<<e1<<" "<<e2<<" "<<e3<<endl;
}
template<class T1,class T2,class T3,class T4> void deb(T1 e1,T2 e2,T3 e3,T4 e4)
{
    cout<<e1<<" "<<e2<<" "<<e3<<" "<<e4<<endl;
}
template<class T1,class T2,class T3,class T4,class T5> void deb(T1 e1,T2 e2,T3 e3,T4 e4,T5 e5)
{
    cout<<e1<<" "<<e2<<" "<<e3<<" "<<e4<<" "<<e5<<endl;
}
template<class T1,class T2,class T3,class T4,class T5,class T6> void deb(T1 e1,T2 e2,T3 e3,T4 e4,T5 e5,T6 e6)
{
    cout<<e1<<" "<<e2<<" "<<e3<<" "<<e4<<" "<<e5<<" "<<e6<<endl;
}
//template <class T> T lcm(T a, T b){return (a/__gcd(a,b)) * b;}
//ll bigmod(ll a,ll b,ll m){if(b == 0) return 1%m;ll x = bigmod(a,b/2,m);x = (x * x) % m;if(b % 2 == 1) x = (x * a) % m;return x;}
//double dur(int x1,int y1,int x2,int y2)
//{
//    return sqrt((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2));
//template<class T> string toString(T n){ostringstream oss;oss<<n;oss.flush();return oss.str();}
//int toInt(string s){int r=0;istringstream sin(s);sin>>r;return r;}
//struct point{int x, y; point () {} point(int a, int b) {x = a, y = b;}};
//int X[]={0,-1,-1,-1,0,1,1,1};
//int Y[]={-1,-1,0,1,1,1,0,-1};
//int X[]={-1,0,1,0};
//int Y[]={0,1,0,-1};

#define mt
#define mod

vec_<int>v1,v2,ache1,ache2,temp;

void solve3(int i,int j)
{
    clr(temp);
    int a=v1[i];
    int b=v2[j];
    int d=abs(a-b);
    if(d>1)
    temp.pb(d);
    int n=sqrt(d);
    for(i=2; i<=n; i++)
    {
        if(d%i==0)
        {
            temp.pb(i);
            a=d/i;
            if(a != i)
                temp.pb(a);
        }
    }
}

map<int,int>ma;
map<int,int>:: iterator it;

int solve4(int m)
{
    if(m!=-1)
        m=temp[m];
    clr(ma);
    int ret,i;
    ret=0;
    if(m==-1)
    {
        for(i=0; i<sz(v1); i++)
            ma[v1[i]]+=(ache1[i]);

        for(i=0; i<sz(v2); i++)
            ma[v2[i]]-=(ache2[i]);
        for(it=ma.begin(); it != ma.end(); it++)
            ret+=abs(it->second);

        return ret;
    }
    for(i=0; i<sz(v1); i++)
        ma[v1[i]%m]+=(ache1[i]);

    for(i=0; i<sz(v2); i++)
        ma[v2[i]%m]-=(ache2[i]);
    for(it=ma.begin(); it != ma.end(); it++)
        ret+=abs(it->second);

    return ret;
}

int solve2(int i,int j)
{
    solve3(i,j);
    int ret=20*1e5 + 10;
    for(i=0; i<sz(temp); i++)
        ret=min(ret,solve4(i));
    ret=min(ret,solve4(-1));
    return ret;
}

class TwoNumberGroupsEasy
{
public:
    int solve(vector <int> A, vector <int> numA, vector <int> B, vector <int> numB)
    {
        v1=A;
        v2=B;
        ache1=numA;
        ache2=numB;
        int i,j;
        int ans=20*1e5 + 10;
        for(i=0; i<sz(v1); i++)
            for(j=0; j<sz(v2); j++)
                ans=min(ans,solve2(i,j));
        return ans;
    }
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, vector <int> p1, vector <int> p2, vector <int> p3, bool hasAnswer, int p4)
{
    cout << "Test " << testNum << ": [" << "{";
    for (int i = 0; int(p0.size()) > i; ++i)
    {
        if (i > 0)
        {
            cout << ",";
        }
        cout << p0[i];
    }
    cout << "}" << "," << "{";
    for (int i = 0; int(p1.size()) > i; ++i)
    {
        if (i > 0)
        {
            cout << ",";
        }
        cout << p1[i];
    }
    cout << "}" << "," << "{";
    for (int i = 0; int(p2.size()) > i; ++i)
    {
        if (i > 0)
        {
            cout << ",";
        }
        cout << p2[i];
    }
    cout << "}" << "," << "{";
    for (int i = 0; int(p3.size()) > i; ++i)
    {
        if (i > 0)
        {
            cout << ",";
        }
        cout << p3[i];
    }
    cout << "}";
    cout << "]" << endl;
    TwoNumberGroupsEasy *obj;
    int answer;
    obj = new TwoNumberGroupsEasy();
    clock_t startTime = clock();
    answer = obj->solve(p0, p1, p2, p3);
    clock_t endTime = clock();
    delete obj;
    bool res;
    res = true;
    cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
    if (hasAnswer)
    {
        cout << "Desired answer:" << endl;
        cout << "\t" << p4 << endl;
    }
    cout << "Your answer:" << endl;
    cout << "\t" << answer << endl;
    if (hasAnswer)
    {
        res = answer == p4;
    }
    if (!res)
    {
        cout << "DOESN'T MATCH!!!!" << endl;
    }
    else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2)
    {
        cout << "FAIL the timeout" << endl;
        res = false;
    }
    else if (hasAnswer)
    {
        cout << "Match :-)" << endl;
    }
    else
    {
        cout << "OK, but is it right?" << endl;
    }
    cout << "" << endl;
    return res;
}
int main()
{
    bool all_right;
    all_right = true;

    vector <int> p0;
    vector <int> p1;
    vector <int> p2;
    vector <int> p3;
    int p4;

    {
        // ----- test 0 -----
        int t0[] = {1,2,3,4};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        int t1[] = {2,1,1,1};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        int t2[] = {5,6,7,8};
        p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
        int t3[] = {1,1,1,2};
        p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
        p4 = 2;
        all_right = KawigiEdit_RunTest(0, p0, p1, p2, p3, true, p4) && all_right;
        // ------------------
    }

    {
        // ----- test 1 -----
        int t0[] = {5,7};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        int t1[] = {1,1};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        int t2[] = {12,14};
        p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
        int t3[] = {1,1};
        p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
        p4 = 0;
        all_right = KawigiEdit_RunTest(1, p0, p1, p2, p3, true, p4) && all_right;
        // ------------------
    }

    {
        // ----- test 2 -----
        int t0[] = {100};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        int t1[] = {2};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        int t2[] = {1};
        p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
        int t3[] = {1};
        p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
        p4 = 1;
        all_right = KawigiEdit_RunTest(2, p0, p1, p2, p3, true, p4) && all_right;
        // ------------------
    }

    {
        // ----- test 3 -----
        int t0[] = {1};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        int t1[] = {1};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        int t2[] = {1};
        p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
        int t3[] = {1};
        p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
        p4 = 0;
        all_right = KawigiEdit_RunTest(3, p0, p1, p2, p3, true, p4) && all_right;
        // ------------------
    }

    {
        // ----- test 4 -----
        int t0[] = {5};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        int t1[] = {1};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        int t2[] = {6};
        p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
        int t3[] = {1};
        p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
        p4 = 2;
        all_right = KawigiEdit_RunTest(4, p0, p1, p2, p3, true, p4) && all_right;
        // ------------------
    }

    {
        // ----- test 5 -----
        int t0[] = {733815053,566264976,984867861,989991438,407773802,701974785,599158121,713333928,530987873,702824160};
        p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
        int t1[] = {8941,4607,1967,2401,495,7654,7078,4213,5485,1026};
        p1.assign(t1, t1 + sizeof(t1) / sizeof(t1[0]));
        int t2[] = {878175560,125398919,556001255,570171347,643069772,787443662,166157535,480000834,754757229,101000799};
        p2.assign(t2, t2 + sizeof(t2) / sizeof(t2[0]));
        int t3[] = {242,6538,7921,2658,1595,3049,655,6945,7350,6915};
        p3.assign(t3, t3 + sizeof(t3) / sizeof(t3[0]));
        p4 = 7;
        all_right = KawigiEdit_RunTest(5, p0, p1, p2, p3, true, p4) && all_right;
        // ------------------
    }

    if (all_right)
    {
        cout << "You're a stud (at least on the example cases)!" << endl;
    }
    else
    {
        cout << "Some of the test cases had errors." << endl;
    }
    return 0;
}
// PROBLEM STATEMENT
//
// A multiset is the same thing as a set, with the difference that a multiset can contain multiple copies of the same element.
// For example, {1,1,1,2,3} is a multiset that contains three 1s, one 2, and one 3.
//
//
//
// The distance between two multisets is the smallest total number of elements we need to erase from them in order to make them equal.
// For example, the distance between {1,1,2,2,3} and {1,2,2,4} is 3.
// Note that we can compute distance as follows:
// For each value, we count its occurrences in the first multiset, we count its occurrences in the second multiset, and we write down the difference between those two counts.
// The distance is then equal to the sum of all values we wrote down.
//
//
//
// If S is a multiset, then (S modulo M) is the multiset of all values (x modulo M) where x belongs to S.
// For example, if S = {11,12,13,21,22} and M = 10, then (S modulo M) = {1,2,3,1,2} = {1,1,2,2,3}.
//
//
//
// You have two multisets called A and B.
// The first multiset is described by the vector <int>s A and numA.
// For each valid i, the multiset contains numA[i] copies of the value A[i].
// The second multiset is described by the vector <int>s B and numB in the same way.
//
//
//
// We are now looking for a positive integer M with the following properties:
// M must be greater than 1, and the distance between (A modulo M) and (B modulo M) must be as small as possible.
// Compute and return the smallest possible distance.
//
//
// DEFINITION
// Class:TwoNumberGroupsEasy
// Method:solve
// Parameters:vector <int>, vector <int>, vector <int>, vector <int>
// Returns:int
// Method signature:int solve(vector <int> A, vector <int> numA, vector <int> B, vector <int> numB)
//
//
// CONSTRAINTS
// -A and B will each contain between 1 and 10 elements, inclusive.
// -All elements of A will be distinct.
// -All elements of B will be distinct.
// -The number of elements in numA will be the same as the number of elements in A.
// -The number of elements in numB will be the same as the number of elements in B.
// -All elements of A and B will be between 1 and 1,000,000,000, inclusive.
// -All elements of numA and numB will be between 1 and 100,000, inclusive.
//
//
// EXAMPLES
//
// 0)
// {1,2,3,4}
// {2,1,1,1}
// {5,6,7,8}
// {1,1,1,2}
//
// Returns: 2
//
// This input describes the multisets A = {1,1,2,3,4} and B = {5,6,7,8,8}.
// For M=2, we have (A modulo M) = {0,0,1,1,1} and (B modulo M) = {0,0,0,1,1}.
// The distance between these two multisets is 2, and that is the best we can get.
//
// 1)
// {5,7}
// {1,1}
// {12,14}
// {1,1}
//
// Returns: 0
//
// The optimal solution is obtained for M = 7.
//
// 2)
// {100}
// {2}
// {1}
// {1}
//
// Returns: 1
//
//
//
// 3)
// {1}
// {1}
// {1}
// {1}
//
// Returns: 0
//
//
//
// 4)
// {5}
// {1}
// {6}
// {1}
//
// Returns: 2
//
//
//
// 5)
// {733815053,566264976,984867861,989991438,407773802,701974785,599158121,713333928,530987873,702824160}
// {8941,4607,1967,2401,495,7654,7078,4213,5485,1026}
// {878175560,125398919,556001255,570171347,643069772,787443662,166157535,480000834,754757229,101000799}
// {242,6538,7921,2658,1595,3049,655,6945,7350,6915}
//
// Returns: 7
//
//
//
// END KAWIGIEDIT TESTING


//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
