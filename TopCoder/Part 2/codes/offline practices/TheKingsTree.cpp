#include <bits/stdc++.h>
#define ms(a,b) memset(a,b,sizeof(a))
#define inf 1<<28
#define mp make_pair
#define pii pair<int,int>
#define fs first
#define sc second
#define pob pop_back
#define vec_ vector
#define clr(a) a.clear()
#define pb push_back
#define eps 1E-7
#define all(a) a.begin(),a.end()
#define allr(a) a.rbegin(),a.rend()
#define fop   freopen("input.txt","r",stdin);freopen("output.txt","w",stdout);
#define sz(a) (int)a.size()
#define ll long long
#define dd double
using namespace std;

template<class T1> void deb(T1 e){cout<<e<<endl;}
template<class T1,class T2> void deb(T1 e1,T2 e2){cout<<e1<<" "<<e2<<endl;}
template<class T1,class T2,class T3> void deb(T1 e1,T2 e2,T3 e3){cout<<e1<<" "<<e2<<" "<<e3<<endl;}
template<class T1,class T2,class T3,class T4> void deb(T1 e1,T2 e2,T3 e3,T4 e4){cout<<e1<<" "<<e2<<" "<<e3<<" "<<e4<<endl;}
template<class T1,class T2,class T3,class T4,class T5> void deb(T1 e1,T2 e2,T3 e3,T4 e4,T5 e5){cout<<e1<<" "<<e2<<" "<<e3<<" "<<e4<<" "<<e5<<endl;}
template<class T1,class T2,class T3,class T4,class T5,class T6> void deb(T1 e1,T2 e2,T3 e3,T4 e4,T5 e5,T6 e6){cout<<e1<<" "<<e2<<" "<<e3<<" "<<e4<<" "<<e5<<" "<<e6<<endl;}
//template <class T> T lcm(T a, T b){return (a/__gcd(a,b)) * b;}
//ll bigmod(ll a,ll b,ll m){if(b == 0) return 1%m;ll x = bigmod(a,b/2,m);x = (x * x) % m;if(b % 2 == 1) x = (x * a) % m;return x;}
//double dur(int x1,int y1,int x2,int y2)
//{
//    return sqrt((x1-x2)*(x1-x2)+(y1-y2)*(y1-y2));
//template<class T> string toString(T n){ostringstream oss;oss<<n;oss.flush();return oss.str();}
//int toInt(string s){int r=0;istringstream sin(s);sin>>r;return r;}
//struct point{int x, y; point () {} point(int a, int b) {x = a, y = b;}};
//int X[]={0,-1,-1,-1,0,1,1,1};
//int Y[]={-1,-1,0,1,1,1,0,-1};
//int X[]={-1,0,1,0};
//int Y[]={0,1,0,-1};

#define mt 55
#define mod

int dp[mt][mt][mt];
vec_<int>adj[mt];

int solve(int node,int r,int g)
{
    int ret1,ret2,i;
    int &ret=dp[node][r][g];
    if(ret != -1)
        return ret;

    ret1=r+1;ret2=g+1;
    for(i=0;i<sz(adj[node]);i++)
    {
        ret1+=solve(adj[node][i],r+1,g);
        ret2+=solve(adj[node][i],r,g+1);
    }
    return ret=min(ret1,ret2);
}

class TheKingsTree {
public:
	int getNumber(vector <int> par) {
        int n=sz(par)+1,i;
        for(i=0;i<n;i++)
            clr(adj[i]);
        for(i=0;i<sz(par);i++)
            adj[par[i]].pb(i+1);
        ms(dp,-1);
        return solve(0,0,0);
	}
};


// BEGIN KAWIGIEDIT TESTING
// Generated by KawigiEdit 2.1.8 (beta) modified by pivanof
#include <iostream>
#include <string>
#include <vector>
using namespace std;
bool KawigiEdit_RunTest(int testNum, vector <int> p0, bool hasAnswer, int p1) {
	cout << "Test " << testNum << ": [" << "{";
	for (int i = 0; int(p0.size()) > i; ++i) {
		if (i > 0) {
			cout << ",";
		}
		cout << p0[i];
	}
	cout << "}";
	cout << "]" << endl;
	TheKingsTree *obj;
	int answer;
	obj = new TheKingsTree();
	clock_t startTime = clock();
	answer = obj->getNumber(p0);
	clock_t endTime = clock();
	delete obj;
	bool res;
	res = true;
	cout << "Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;
	if (hasAnswer) {
		cout << "Desired answer:" << endl;
		cout << "\t" << p1 << endl;
	}
	cout << "Your answer:" << endl;
	cout << "\t" << answer << endl;
	if (hasAnswer) {
		res = answer == p1;
	}
	if (!res) {
		cout << "DOESN'T MATCH!!!!" << endl;
	} else if (double(endTime - startTime) / CLOCKS_PER_SEC >= 2) {
		cout << "FAIL the timeout" << endl;
		res = false;
	} else if (hasAnswer) {
		cout << "Match :-)" << endl;
	} else {
		cout << "OK, but is it right?" << endl;
	}
	cout << "" << endl;
	return res;
}
int main() {
	bool all_right;
	all_right = true;

	vector <int> p0;
	int p1;

	{
	// ----- test 0 -----
	int t0[] = {0,0,0};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 4;
	all_right = KawigiEdit_RunTest(0, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 1 -----
	int t0[] = {0,1,2,3,4};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 12;
	all_right = KawigiEdit_RunTest(1, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 2 -----
	int t0[] = {0,1,2,3,1};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 10;
	all_right = KawigiEdit_RunTest(2, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 3 -----
	int t0[] = {0,0,1,0,4,3,5,2,0,7,9,2,4,5,3,1};
			p0.assign(t0, t0 + sizeof(t0) / sizeof(t0[0]));
	p1 = 26;
	all_right = KawigiEdit_RunTest(3, p0, true, p1) && all_right;
	// ------------------
	}

	{
	// ----- test 4 -----
	p0.clear() /*{}*/;
	p1 = 1;
	all_right = KawigiEdit_RunTest(4, p0, true, p1) && all_right;
	// ------------------
	}

	if (all_right) {
		cout << "You're a stud (at least on the example cases)!" << endl;
	} else {
		cout << "Some of the test cases had errors." << endl;
	}
	return 0;
}
// PROBLEM STATEMENT
//
// The King of Byteland is going to decorate a rooted tree.
// The tree has N vertices, numbered 0 through N-1.
// Vertex 0 is the root of the tree.
//
//
//
//
// You are given the description of the tree in a vector <int> parent.
// For each valid i, the parent of vertex i+1 is parent[i].
// Note that the number of the parent is always smaller than the number of the child.
//
//
//
//
// Each vertex of the tree must be painted in one of two colors: red or green.
// After the entire tree has been painted we can compute the cost of the painting.
// For each i, the cost of painting vertex i is defined as the number of vertices that are in the subtree rooted at i and have the same color as vertex i.
// For example, if a vertex is red and all other vertices in its subtree are green, the cost of painting this vertex is 1.
// The cost of painting the entire tree is the sum of all costs of painting its vertices.
//
//
//
//
// Return the minimum cost of painting the given tree.
//
//
// DEFINITION
// Class:TheKingsTree
// Method:getNumber
// Parameters:vector <int>
// Returns:int
// Method signature:int getNumber(vector <int> parent)
//
//
// CONSTRAINTS
// -N will be between 1 and 50, inclusive.
// -parent will contain exactly N-1 elements.
// -For each i, parent[i] will be between 0 and i, inclusive.
//
//
// EXAMPLES
//
// 0)
// {0, 0, 0}
//
// Returns: 4
//
// The root vertex 0 has three children: vertices 1, 2, and 3.
// One optimal way to color this tree is to color all three children red and their parent green.
//
// 1)
// {0, 1, 2, 3, 4}
//
// Returns: 12
//
// Color any three vertices green and the other three red.
//
// 2)
// {0, 1, 2, 3, 1}
//
// Returns: 10
//
//
//
// 3)
// {0, 0, 1, 0, 4, 3, 5, 2, 0, 7, 9, 2, 4, 5, 3, 1}
//
// Returns: 26
//
//
//
// 4)
// {}
//
// Returns: 1
//
//
//
// END KAWIGIEDIT TESTING


//Powered by KawigiEdit 2.1.8 (beta) modified by pivanof!
